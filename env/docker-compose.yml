networks:
  everlock-network:
    driver: bridge

services:
  postgres:
    container_name: postgres
    image: postgres:17
    volumes:
      - ./postgres/pg_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - everlock-network
    restart: "no"
    healthcheck:
      test: pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}
      interval: 10s
      timeout: 30s
      retries: 5
  migrations:
    container_name: migrations
    image: migrate/migrate:4
    command: '-path /everlock/internal/db/migrations -database "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable" up'
    volumes:
      - ../internal/db/migrations:/everlock/internal/db/migrations
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - everlock-network
    restart: "no"
    depends_on:
      postgres:
        condition: service_healthy
  everlock:
    platform: linux/amd64
    build:
      context: ../
      dockerfile: ./env/everlock/Dockerfile
    environment:
      APP_ENV: prod
      DB_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - everlock-network
    restart: "no"
    healthcheck:
      test: "curl --fail --silent --max-time 10 http://localhost:80/ || exit 1"
      interval: 10s
      timeout: 30s
      retries: 5
    depends_on:
      migrations:
        condition: service_completed_successfully
    deploy:
      replicas: 2
  nginx:
    container_name: nginx
    image: nginx:1.27
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - everlock-network
    ports:
      - "80:80"
    restart: "no"
    healthcheck:
      test: "curl --fail --silent --max-time 10 http://localhost:80/ || exit 1"
      interval: 10s
      timeout: 30s
      retries: 5
    depends_on:
      everlock:
        condition: service_healthy
